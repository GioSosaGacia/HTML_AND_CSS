:root {
    --azul: #0071b7;
    --blanco: #FFF;
    --naranja: #ff4f1e;
}
html {
    font-size: 62.5%; /** 1REM = 10pX **/
}

body {
    background-color: var(--azul);
    font-family:  'Lato', sans-serif;
    font-size: 1.6rem;
}

.caja-curso {
    background-color: var(--naranja);
    text-align: center;
    color: var(--blanco);
    padding: 5rem;

}
.caja-curso h1 {
    margin: 0;
}
.caja-curso p {
    font-size: 2.4rem;
}
.caja-curso a {
    font-size: 2.4rem;
    padding: 2rem;
    display: inline-block;
    text-decoration: none;
    color: var(--blanco);
    padding: 0;
}


h1, h2 {
    color: var(--blanco);
    text-align: center;
    margin: 5rem 0;
}

.contenedor {
    max-width: 120rem;
    margin: 0 auto;
}
.box {
    background-color: var(--naranja);
    color: var(--blanco);
    padding: 5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 4rem;
    margin-bottom: 2rem;
}


/* Display grid solo afecta al primer nivel de hijos */
/* 01 */
.grid-1 {
    display: grid;
}

/* 02 */
.grid-2 {
    display: grid;
    /* cada 300px es una columna  */
    grid-template-columns: 300px 300px 300px;
    gap: 1rem;
}

/* podemos cambiar el posicionamiento de los elementos con */

.grid-2 .box:nth-child(2) {
    /* grid-column-start: 3;
    grid-column-end: 4; */
    /* atajo  */
    grid-column: 1/2;
}

/* 03 */
.grid-3 {
    display: grid;
    /* grid-template-rows: 300px 100px 100px 300px; */
    /* repeat(1:cuantes veces queremos que se repita, 2:el tamaño, usamos esta forma para no tener que declarar el parametro de cada uno) */
    /* Tambien podemos mezclar ambos rows and columns  */
    grid-template-rows: repeat(6, 200px);
    grid-template-columns: 300px 300px 300px;
    gap: 1rem;
}

.grid-3 .box:nth-child(3) {
    grid-row: 2/3;
}

.grid-3 .box:nth-child(4) {
    grid-row: 3 / 4;
}

/* 04 spam */
/*  Grid. En este caso, el span se usa para hacer que un elemento en un contenedor Grid ocupe más de una fila o columna. Es una manera de controlar el tamaño y el posicionamiento de un ítem dentro del Grid. */
.grid-4 {
    display: grid;
    grid-template-rows: repeat(2, 300px);
    grid-template-columns: repeat(3, 300px);
}

.grid-4 .box:nth-child(1) {
    background-color: burlywood;
    grid-row: 1 / span 2;
}

.grid-4 .box:nth-child(2) {
    background-color: aquamarine;
    grid-column: 2 / span 2;
    grid-row: 1 /span 2;
}

.grid-4 .box:nth-child(3) {
    background-color: bisque;
    /* tambien se puede usar sin span solo usando  grid-column: 1 / 3;*/
    grid-column: 1 / span 3;
}

/* 5 shorthand  */
.grid-5 {
    display: grid;
    /* grid-template-rows: repeat(2, 300px);
    grid-template-columns: repeat(3, 300px); */
    /* shorthand */
    grid: repeat(2, 300px) / repeat(3, 300px);
}

/* 6 autoflow */
/* La propiedad grid-auto-flow en CSS Grid controla cómo se colocan los elementos dentro de un contenedor Grid cuando no se especifica explícitamente su posición. Esta propiedad determina la dirección en la que los elementos se colocan automáticamente en las filas y columnas del grid.

¿Para qué se usa grid-auto-flow?
Cuando un contenedor Grid tiene más elementos de los que se pueden organizar explícitamente con grid-template-columns y grid-template-rows, grid-auto-flow se encarga de organizar esos elementos adicionales de manera automática. */
.grid-6 {
    display: grid;
    grid: repeat(2, 300px) / repeat(3, 300px);
    /* si usamos flow hace un reacomodo para no crear mas saltos de lineas de los que se requiere */
    grid-auto-flow: column;
}

.grid-6 .box:nth-child(2) {
    /* cuando lo usamos sin flow genera un salto de linea para estar en esa posicion quedando 1f = 1. 2f= 2,3,4 y 3f=5 y 6 */
    grid-column: 1 / 2;
}

/* 7 frid FR = fracciones(se ajustan al espacio disponible) y Grid repeat(nVeces, tamaño(px o fr)) lo usamos con px y % */
.grid-7 {
    display: grid;
    height: 400px;
    /* 2fr ->(La primera parte toma dos fracciones) repeat(2,1fr) -->(La segunda y tercera 1fr cada uno) */
    /* grid-template-columns: 2fr repeat(2,1fr); */
    /* shorthand */
    /* Nota: no se puede agregar 1fr si no ahi una altura(height) ya que el ancho la toma en base a su contenedor, si no tiene altura, debemos agregar un tamaño ya sea en ps o rem grid: repeat(2, 40rem) */
    grid: repeat(2, 1fr) / repeat(3, 1fr);
}

/* 8 grip gap */
.grid-8 {
    display: grid;
    grid: repeat(2, 20rem) / repeat(3, 1fr);
    /* column-gap: 2rem;
    row-gap: 2rem; */
    /* shorthand */
    gap: 2rem ;
}

.grid-8 .box{
    margin: 0;
}

/* 9 grid areas sirve para posicionar elementos ya sea por nombres */
.grid-9 {
    display: grid;
    height: 120rem;
    grid-template-areas: "header header header"
                         "nav nav nav"
                         "contenido contenido sidebar"
                         "footer footer footer"
    ;
    grid-template-columns: repeat(3,1fr);
    /* De esta forma superabamos el height */
    /* grid-template-rows: 25rem 10rem 6rem 25rem; */
    /* Usamos fr para que no se pase de los 120rem en el height */
    grid-template-rows: 2.5fr 1fr 6fr 2.5fr;
    gap: 2rem;
}

.grid-9 .box:nth-child(1) {
    grid-area: header
}

.grid-9 .box:nth-child(2) {
    grid-area: nav;
}

.grid-9 .box:nth-child(3) {
    grid-area: contenido;
}

.grid-9 .box:nth-child(4) {
    grid-area: sidebar;
}
.grid-9 .box:nth-child(5) {
    grid-area: footer;
}

.grid-9 .box{
    margin: 0;
}


/* 10 grid-template es un shorthand que incluye las areas y los rows*/
.grid-10 {
    display: grid;
    height: 120rem;
    /* con esto eliminamos gric template rows */
    grid-template: "header header header " 2.5fr
                    "nav nav nav" 1fr
                    "contenido contenido sidebar" 6fr
                    /* con los ultimos 3 1fr eliminamos grid-template-columns: repeat(3,1fr); */ 
                    "footer footer footer" 2.5fr / 1fr 1fr 1fr 
    ;
    /* grid-template-columns: repeat(3,1fr); */
    gap: 2rem;
}

.grid-10 .box:nth-child(1) {
    grid-area: header
}

.grid-10 .box:nth-child(2) {
    grid-area: nav;
}

.grid-10 .box:nth-child(3) {
    grid-area: contenido;
}

.grid-10 .box:nth-child(4) {
    grid-area: sidebar;
}
.grid-10 .box:nth-child(5) {
    grid-area: footer;
}

.grid-10 .box{
    margin: 0;
}

/* 11 alineación grid */
.grid-11 {
    display: grid;
    grid-template-columns: repeat(6, 1fr);
    height: 300px;
    /* solo para alinear de manera vertical */
    /* align-items: center; */
    /* funciona igual que align-items y justify-content ambos al mismo tiempo */
    /* place-content: center; */
}

/* 12 grid autofill y autofit  */
.grid-12 {
    display: grid;
    /* sigue generano mas columnas y funciona con px */
    /* grid-template-columns: repeat(auto-fill, 200px); */
    /* auto fit crea las columnas necesarias */
    grid-template-columns: repeat(auto-fit, 200px);

    /* para integrarlo con francciones fr debemos de usar min-max, ya que crea un valor minimo y uno maximo */
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
}