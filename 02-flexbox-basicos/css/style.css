:root {
    --azul: #0071b7;
    --blanco: #FFF;
    --naranja: #ff4f1e;
}
html {
    font-size: 62.5%; /** 1REM = 10pX **/
    box-sizing: border-box;
}
*, *:before, *:after {
    box-sizing: inherit;
}
  

body {
    background-color: var(--azul);
    font-family:  'Lato', sans-serif;
    font-size: 1.6rem;
}

h1, h2 {
    color: var(--blanco);
    text-align: center;
    margin: 5rem 0;
    padding: 1rem;
}
.caja-curso {
    background-color: var(--naranja);
    text-align: center;
    color: var(--blanco);
    padding: 5rem;

}
.caja-curso h1 {
    margin: 0;
}
.caja-curso p {
    font-size: 2.4rem;
}
.caja-curso a {
    font-size: 2.4rem;
    padding: 2rem;
    display: inline-block;
    text-decoration: none;
    color: var(--blanco);
    padding: 0;
}


.contenedor {
    max-width: 120rem;
    margin: 0 auto;
}
.box {
    background-color: var(--naranja);
    color: var(--blanco);
    padding: 5rem;
    display: flex;
    justify-content: center;
    align-items: center;
    font-size: 4rem;
    border: 1rem solid #bb2b03;
}

.contenedor > div {
    background-color: var(--blanco);
    padding: 5rem;
}


/* 1- Inicio del Uso del display flex, se mostrarán de izq a derecha, porque  por default se usa un flex-direction:row; y ese va de izq a der, ejemplo si estamos usando un div en vez de cada uno obtenga una fila se acomodarán en una sola fila  */
.d-flex {
    display: flex;
}


/* 2 flex-direction: column; mostrará el acomodo en columnas */
.d-flex-2 {
    display: flex;
    flex-direction: column;
}

/* 3 Cuando usamos el ->Justify content(con ->direction row) servira para alinear los elementos de manera horizontal  */
.d-flex-3 {
    display: flex;
    justify-content: space-evenly;
}

/* 4 Cuando usanos el ->>Justify content(con ->direction column se modifica o alinear el cointenido de manera vertical) */
.d-flex-4 {
    display: flex;
    flex-direction: column;
    height: 1000px;
    justify-content: space-around;
}


/* 5 se usa "Align Items": para alinear de arriba hacia abajo cuando la direccion es -->(Directio: row;), por default usa align-items: stretch; que es estirar al espacio disponible cada uno de los elementos*/
.d-flex-5 {
    display: flex;
    height: 700px;
    align-items: center;
}

/* 6 se usa "Align Items":para alinear de izq a derecha cuando la direccion es  -->(Direction: column;)*/
.d-flex-6 {
    display: flex;
    flex-direction: column;
    height: 700px;
    align-items: center;
}


/* 7 uso de align-items(de arriba hacia abajo, vertical) y justify-content(de izq a der de manera horizontal usando row y si usamos column se invierte justify-content sera de arriba hacia abajo  y align-items de izquierda a derecha */
.d-flex-7 {
    display: flex;
    /* el uso de ambos cambian all usar row y colum */
    flex-direction: column;
    /* al utililizar display:flex; en automatico usas estos tres argumentos sin escribirlos, ya estan definidos por defecto
    flex-direction: row;
    justify-content: flex-start;
    align-items: stretch; */
    height: 700px;
    /* se aplica de manera horizontal con flex-direction: row; */
    justify-content: flex-start;
    /* se aplica de manera vertical  */
    align-items: flex-start;
}


/* 8 flex-basis afecta o funciona desde los hijos y funciona casi como un width, solo que flex-basis es más flexible ya que si usas flex-basis: 200px y en este ejemplo uno es mas grande, lo que hace es que inicia desde 200px y si un elemento es mas grande no importa que ya flex basis no es tan extricto como el width
flex-basis permite modificar el ancho */
.d-flex-8 {
    display: flex;

}
/* accedemos a los hijos mediante su clase .box */
.d-flex-8 .box {
    /* es el tamaño inicial  */
    flex-basis: 33.3%;
}


/* 9 gap y calc tambien se usan en el hijo */
.d-flex-9 {
    display: flex;
    /* gap agrega separacion entre los elementos  */
    /* gap: 2rem; */
    justify-content: space-between;
}

/* Este lo usamos para ver como funciona gap y calc() */
/* .d-flex-9 .box { */
/* Para seleccionar un hijo */
.d-flex-9 .box:nth-child(1){
    /* es el valor inicial */
    /* flex-basis: 33.3%; */

    /* calc es una funcion de calculadira */
    /* flex-basis: calc(500px - 240px); */

    /* para seleccionar solo 1 elemento de los 3 que existen */
    flex-basis: calc(50% - 1rem);
}

/* cuando usamos los : indica que es un pseudo - selector, aqui seleccionamos el 2 y el 3 */
.d-flex-9 .box:nth-child(2),
.d-flex-9 .box:nth-child(3) {
    flex-basis: calc(25% - 1rem);
}


/* 10 flex wrap  */
.d-flex-10 {
    display: flex;
    /* La propiedad flex-wrap se usa en un contenedor con display: flex; para definir cómo los elementos dentro del contenedor se distribuyen cuando no caben en una sola línea. su valor por defectro en no-wrap, tambien se puede usar wrap-reverse*/
    flex-wrap: wrap;
}

.d-flex-10 .box {
    flex-basis: 33.3%;
}


/* 11 */
/* flex grow o factor de crecimiento, tambien toma en cuanta el padding,margin, etc */
.d-flex-11 {
    display: flex;
    /* pueden crecer verticalmente y no horizontalmente */
    /* height: 500px; */ 
}

/* por default flex-grow es 0 
La propiedad flex-grow en CSS se utiliza para definir cómo los elementos dentro de un contenedor flexbox deben "crecer" para llenar el espacio disponible en el contenedor.*/
.d-flex-11 .box:nth-child(1) {
    /* es el factor de crecimiento, el contenedor mide 1100px, de esos pixeles, este reparte de forma equitativa pixeles a cada uno de los elementos */
    flex-grow: 2;
}

.d-flex-11 .box:nth-child(2) {
    flex-grow: 1;
}

.d-flex-11 .box:nth-child(3) {
    flex-grow: 1;
}

/* 12 flex Shrink */
/* flex-shrink especifica cuánto debe encogerse un elemento en relación con los demás cuando el contenedor tiene menos espacio del que los elementos necesitan. */
.d-flex-12 {
    display: flex;
}

.d-flex-12 .box {
    flex-grow: 1;
    flex-basis: 300px;
}

.d-flex-12 .box:nth-child(3) {
/* Su valor por defecto es de 1 entre mas pequeña este la pantalla este elemento se encogera mas que lso demas  */
    flex-shrink: 2;
}

/* 13 */
/* Flex Shorthand --> El shorthand (abreviado) para las propiedades flex-grow, flex-shrink, y flex-basis es una manera de escribirlas juntas en una sola línea de código. Esto hace que tu código sea más conciso y fácil de leer. */
.d-flex-13 {
    display: flex;
}

.d-flex-13 .box {
    /* flex-basis: 33.3% */
    /* flex-grow: 1; */
    /* flex-shrink: 1; */
    /* Esta es la forma resumida de los tres de arriba 1.Valoe de crecimiento, 2.decrecion, 3.flex-basis */
    flex: 1,0, 33.3%;
}