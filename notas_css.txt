Permite cambiar la apariencia del HTML modificando el 
 1.Tamaño
 2.Colore
 3.Actua sobre cualquier elemento 

 Se aplica mediante etiques y usando llaves {}

1.Se usa el selector el cual es una p,b,li,a,estructura
    p{
        Todo lo que esta dentro de las llaves es lo que se aplicará al selector

        Los dos juntos son conocidos como declaraciones: (color,font-size)
        Usa propiedades ->  color:valor ejemplo black
                            font-size : 20px -> px= pixeles que es la unidad
    }

2.Unidades:
    px, em, rem etc
    Otras unidades que puedes definir como unidad es:
        padding, margin, width, height se usan para controlar la dostancia entre elementos 

    Tambien existen unidades fijas como pixeles, centimetros y relativas es decir que toman su valor dependiendo del valor definido por otra propiedad

3.Para agregar una hoja de estilo al html usamos la etiqueta <style> </style> en el apartado de <head> </head> del html

4.pARA PODER ligar una hoja de estilo al html usamos link, rel = relation 
<link rel="stylesheet" href="CSS/app.css">




*****************Colores*****************
Se pueden definir colores en base a su nombre, por su valor hexadecimal hex, RGB, HSL HUGE SATURATION AN LIGHT
    Un colore puede utilizar combinación hexadecimal blanco #ffffff o negro #000000

Algunas aplicaciones como Photoshop p Adobe xd TE Permite obtener colores en base a cierta cantidad de un valor como son RGB y HSL, estos tambien son soportados por CSS

Tambien se puede añador transparencia con RGBA y HSLA y recientemente tambien es posible hacerlo por medio de RGB Y HSL  A = alfa





****************Selectores***********************
Los selectores CSS permiten identificar a qué elemento (o elementos) se aplicarán los estilos definidos en dicho bloque. Los más conocidos son los de etiqueta (p, ul) etc.

Por ejemplo en css a los elementos que esten dentro de un section a{ } aqui el selector seria el section el cual permitira modificar todas las anclas que esten dentro de ese apartado:

    footer a{
        text-transform: uppercase;
    }

Un pseudo selector es lo mismo pero despues de la etiqueta se agregan dps puntos: el cual nos da acceso a más funciones:

    /* first-child solo le aplica estilo al primer elemento */
    nth-child(3) -> permite seleccionar un elemento si ahi 5 elementos y selecciones el 3, al que este en esa posición lo modificará
        nav a:first-child{
            color: black;
        }

Css se queda con la ultima instrucción de arriba hacia abajo, mientras mas especifico sea el selector es más  provable que css lo tome en cuenta y es a lo que se le llama especificidad!!






******Especificidad pregunta para obtener un trabajo******************
Con la especificidad podemos saber que valores serán tomado en cuanta
por el navegador, dependiendo que que tan especifico sea nuestro SELECTOR 

css se escribe en casacada de arriba hacia abjo, dentro de la especificidad ahi clases i Id's, ambos se definen en el HTML, usando -> class o id

    1.class como caracteristica soporta 1 o más y tambien se puede reutilizar, en las clases si puede existir mas de una clase con el mismo nombre

    2.id solo se  puede asignar 1 por elemento HTML y tambien solo se debe de utilizar 1 por documento, puedes asignar varios pero cada uno con diferente nombre no con el mismo 

Utilizar clases y id's  en los selectores permite tener una especificidad mas alta 

Evitar crear selectores muy complicados, hará que el codigo sea mas dificil de mantener 

Se suele utilizar mas un class que un id. en css si son dos palabras es conveniente usar - medio para unirlas ejemplo casa-amarilla

Existe una calculadora de especificidad donde el rango mas bajo es una etiqueta, con dos selectore, despues una clase y el mayor peso es el id

        nav a{
            text-transform: uppercase;
        }

        /* PaRA SELECCIONAR UNA CLASE SE UNA UN PUNTO . */
        .navegacion a{
            text-transform: lowercase;
        }


        /* cuando es id agregas un # */
        #navegacion a{
            text-transform: capitalize;
        }

un id es mas pesado que una clase lo cual hace que sean mas lentos, lo recomendable es usar clases


    


    **********Agregando clases a los selectores**************
    ejemplo dentro de una nav podemo tener una clase y en cada ancla que exista modemos agregar las misma clase, dentro de uan clase puede haver dos clases;  
            <nav class="navegador color-rojo"> 
                <a class=" enlace" href="index.html">Inicio </a> 
            </nav>


    Nos podemos guiar con MODULOS: un modulo es definir un nav con una clase y dentro de esa clase contiene varias anclas las cuales estan dentro del nav eso es un modulo, BEM Y SMACSS




******************Box Model*************
pregunta de entrevista
En box model css todo es una caja, pero como sea esa caja y que medidas tenga depende de 4 cosas:
    1: Contenido
    2:Padding o relleno
    3:Borde
    4:Margin on margen 

Sin box model podriamos tener un resultado no deseado al usar estas propiedades.

box-sizing
    Content-box se adapta al width y al margin
    border-box se adata especificamente al ancho declarado en el width

Marging: es el espacio que se usa entre elementos y padding es el espacio que se utiliza dentro de un elemento

Nota: dependiendo del navegador que se use algunos agregan stilo css, lo cual podria hacer cambios en nuestro sitio web, para resolverlo podemos usar "Normalize.css" debemos de buscarlo en la web copiar el codigo, crear en css un archivo normalize y pegar el codigo de la pagina web normalize y eso nos ayudará a estandarizar el codigo creado en cualquier web o navegador para que este no cambie, debemos de asegurar no esta traducido al español

Normalize va antes de agregar el link de estilos css y no despues







******************+Displays en css*****************
Existen 3, todos los elementos ya contienen un display por defecto, unos elementos comparten el mism otros tienen otro
    Block: Un elemento de coloca debajo del otro sin importar su tamaño, se les pude aplicar width and height
    Inline: elementos a la derecha uno tras otro, a este no se le puede poner alto y ancho
    Inline-Block: Permite darle un width, height, margin a un elemento inline, lo que no es posible hacer en un elmento inline 

    Tambien esta el Display-flex y el grid




************Agrupando el codigo**********
Exiten atajos tanto para:
    Margin:50px 0 30px 20 px arriba, derecha, abajo e izquierda
    padding: los mismo que el marging para el padding 
    border: 1px solid #e1e1e1  ancho del border, si es solido(tipo), color




************Imagenes como backgroung*****************
Usando background-image o mediante CSS
Comunmente a las imagenes grandes en la ventana principal superior se les conoce como  HERO






***************FlexBox**********************************
Fue diseñado comoun modelo de unidimienciones para crear layouts.
Antes de usarlo se utilizaban tablas o floats 

    Ejes en flexBox: coloca o distribuye los elementos en una direccion ya sea fila(row) o columna(column).
    Row es colocado por default al definir un display:flex; y mostrara los elementos ya se a de izquierda o derecha(row) conocido como Main Axis:flex-direction:row o derecha a izquierda con (row-reverse)

    Colunm o colunm-revese los elementos se colocarán de arriba a abajo o a lo opuesto

    No añade animaciones solo se usa para alinear los elementos 

    Flex-box se debe de asignar en el elemento padre a los hijos.

        <div class="contenedor-navegacion">
        <nav class="nav-principal contenedor"> flex se debe de aplicar aqui porque es el padre de los enlaces
            <a href="index.html">Inicio </a>
            <a href="nosotros.html">Nosotros</a>
            <a href="tienda.html">Tienda</a>
            <a href="blog.html">Blog</a>
            <a href="galeria.html">Galeria</a>
            <a href="contacto.html">Contacto</a>
        </nav>
    </div>

    /*Con este display flex accedemos a varias propiedades y con ello aplicamos el flexBos a un grupo de elementos  */
    display: flex;
    /* no es necesario declarar row ya que se aplica por defecto, se usa para cambiar la direccion */
    flex-direction: row;



***********Alineacion horizontal y vertical en FlexBox********
Flex-box da acceso a estas dos propiedades: 

    1.Para justify se con row
    Usa propiedades como "justify-content" sirve para alinear el contenido horizontalmente si estas usando flex-direcction: row; y si estas usando flex-direction: colunm; ser'a utilizado para alinear el contenido de manera vertical.

    2.Para align se usa con colonm
    "align-items" Usando flex-direction: row; será utilizado para alienar el contenido vertical, pero si es colunm alineara el contenido de manera horizontal

    Al usar la herramienta de desarrollo y usar flex al momento de inspeccionar nos mostrará un editos de flexbox el cual podemos manipular








    *************************CSS Grid**********************
Permite definir la ubicacion y el tamaño de los elementos en tu sitio web, ademas de que permite distribuir elementos de manera vertical y orizontal el mismo tiempo y no demanera independiente como FlexBox

    Se habilita usando display:grid;, ademas tiene propiedades exclusivas:

    Para crear columnas usamos grid-template-colunms
    Para filas usamos grid-teplate-rows
    Tambien podemos usar grid-template-areas para diseño 

    grid-lines nos muestra un maquedado de lineas para saber donde deseamos colocar un elemento |  |    |   |

    grid track: puede ser vertical | | |  u horizontal - una arriba o debajo de otra

    grid cell se utiliza al usar un grid completo con rows

    grid area para usar nombres dentro del grid

No se recomienda usar las medidas en pixeles, se recomienda "fr" = a una fraccion x numeri fr seran las fracciones agregadas para x elemento:
    .listado-categorias {
    display: grid;
    /* se puede usar repeat(cuantas veces, de que tamañp) */
    /* grid-template-columns: 300px 300px 300px 300px; */
    /* grid-template-columns: 3fr 1fr; */
    grid-template-columns: repeat(4,300px);
    grid-template-rows: 300px 300px;

}






***************Fuentes*************************
Mediante CSS podemos cambiar el estilo de la fuente que tendra la página web, tambien se puede modificar el ancho, tamaño, tipo, alineación etc.

    1.Podemos añadir otras fuentes con la propiedad @font-face: se debe de descargar la fuente para usarla, se debe de agregar la rutas y minimo descargar 4 tipos ya que depende del navegador es la fuente que se utilizará.
            @font-face {
                font-family: nombreFuente;
                src: ul(ubicacion.woff);
            }

Consideraciones: unas fuentes son de paga, se recomienda verificar la licencia o utilizar google fonts para usar fuentes gratis, entre mas fuentes agreges tu sitio web será más lento, recomendable no usar mas de tres fuentes

        Usamos raleway y playfair display y para agregarlo a css o html copiamos el link: 
            <link rel="preconnect" href="https://fonts.googleapis.com">
            <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
            <link href="https://fonts.googleapis.com/css2?family=Raleway:ital,wght@0,100..900;1,100..900&display=swap" rel="stylesheet">

            Y se agrega en el Html despues del normalize pero antes de nuestro css:

                    body {
                        font-family: "Raleway", sans-serif;
                    }

                    /* Globales */
                    h1, h2, h3 {
                        font-family: "Playfair", serif;
                    }









*********************Unidades en CSS**************************
Algunas propiedades en css usan unidades como: width, margin, padding, font-size etc, la unidad va junto el valor, algunas propiedades pueden utilizar el -20px no en los margenes

    Unidades adsolutas son las que son exactas como los pixeles: 
        Pixeles:
    
    Para mejor adaptabilidad entre pantallas en mejor usar unidades relativas como rem.
    Unidades relativas toman su valor en base a otro elemento y son em, rem, vh,vw y porcentajes, se adaptam mejor a diferentes resoluciones y densidades de pixeles, lo cual es mejor para la cantidad de dispositivos que usan los usuarios al nevegar.

    Las unidades relativas toman su valor en base a otro elemento: Puede ser de header que tome 100px un h1 que esta como hijo tome el 50% = 50px
        Rem´s: 3rem los rems toma en consideracion el tamaño que tengamos en el HTML por dafault es de 16px 
        No son tan recomendables 
        Em´s: su tamaño es relativo a otros elementos 1 * 3 veces mayor de uno al otro -1 mas pequeño + de 1 mas grande  3em
        vw = view port width la ventaja de usarlo es que adapta al tamaño del dispositivo en uso 10vw

    Para convertir de pixeles a rem podemos usar la calculadora de px a rem 
    Para no estar usando la calculadora de pixeles existe un hack de hacerlo falcil al usar rem y es usar un font-size en la etiqueta html del css del 65.5% donde 1 rem sera igual a 10px 

El valor box-sizing: inherit; hace que el elemento o pseudo-elemento adopte el valor de box-sizing del elemento padre. Esto es útil para asegurar que el modelo de caja sea consistente en toda la página.

¿Cómo funciona border-box?
Cuando aplicas box-sizing: border-box;, el ancho y alto de un elemento se calculan de la siguiente manera:

El ancho total y alto total del elemento ya incluyen el contenido, el relleno y el borde.
Es decir, si defines un ancho de 100px en un elemento con box-sizing: border-box;, ese elemento tendrá un ancho de 100px en total, incluso si tiene un relleno o un borde. El relleno y el borde se incluyen dentro de esos 100px.

Explicación:
*: El selector universal se refiere a todos los elementos de la página web. Al aplicar box-sizing: inherit;, se asegura de que todos los elementos utilicen el modelo de caja heredado, es decir, tomen el valor de box-sizing del elemento padre.

*:after: Este selector se refiere a todos los pseudo-elementos :after. El pseudo-elemento :after se usa para insertar contenido después del contenido de un elemento. Al igual que con *, box-sizing: inherit; hace que el pseudo-elemento herede el modelo de caja del elemento padre.

            html {
                box-sizing: border-box;
                /* Usando esta linea 1 rem = 10px  */
                font-size: 62.5%; 
            }
            

            body {
                font-family: "Raleway", sans-serif;
                /* usamos esta para que la base sea de 16px */
                font-size: 1.6rem;
            }







*********Formas de escribor codigo en CSs*******************++++
Cualquier de los 4 te permitirá completar un proyecto 
    BEM: block element modifier 
            .card{} --> nombre del bloque y cada elemento dentro de ese bloque usará doble guion --> bajo 
            .card__titulo{},
            para un modificador del elemento usamo guion medio -- como puede ser al usar un hover 
            .card__titulo--activo{}
    MÓDULOS:
            .card {}, .a{}, card img{} es el que estamos usando
    UTILIDADES:
            Creas una regla de css como: .text-center{}, .color-red-100{}, bg-blue-200{} creas utilidades y las bas agregando a tus elementos HTML
    SMACSS:
            Arquitectura escalable y no esta muy actualizado y debes de verificar que elementos comparten atributos etc
            #header, #article, #footer { width: 960px;, marging: auto;}

    Se puede usar mas de uno en un mismo proyecto pero lo ideal es usar 1 o 2

    Se recomienda ir ajustando el tamaño de texto o encabezados de arriba hacia abajo 






    *******************Sobre Nosotros******************
/* Bloque nosotros */
.sobre-nosotros {
    /* linear gradient es un degradador lineal que se usa con bgimg, to right que hacia la izq, del 0 al 50 negro y del 51 hacia adelante rojo */

    /* background-image: linear-gradient(to right, black 50%, red 100%); */
    background-image: linear-gradient(to right, transparent 50%, #037bc0 50%),url(../img/nosotros.jpg);
    background-position: left center;
    padding: 8rem 0;
    background-repeat: no-repeat;
    /* al usar la , usamos el 100% para linear gradien y despues 120 rem para la imagen */
    background-size: 100%, 120rem;
}





************************Cuando utilizar CSS Grid y cuando FlexBox*******************
1.FlexBox para la alineación o distribucion de los elementos que estaran dentro de contenedores

2.Grid para definir el layout de tu sitio web, como puede ser las columnas o contendores de elementos: | | |



        Cuando usar grid para la separacion no usas padding si no gap:
                .sobre-nosotros-grid {
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    /* con grip no usas padding usas gap */
                    column-gap: 5rem;
                }

                .texto-nosotros {
                    /* indica que valla de la linea 2 a la 3 */
                    grid-column: 2/3;
                }


        Usando flex:
                    .sobre-nosotros-grid {
                        display: flex;
                        justify-content: flex-end;
                    }

                    .texto-nosotros {
                        flex-basis: 50%;  --> para el ancho del elemento
                        padding-left: 10rem;
                    }





********************Productos***********************
Para usar grid o flex se debe de usar la clase del elemento padre para porterior a ello posisionar los hijos usando flex o grid: usamos nth-child para seleccionar de manaera individual a los hijos dentro de una div o section 

    .contenido-principal {
    padding-top: 5rem;
}
.listado-productos {
    display: grid;
    /* damos la misma forma a cada uno de los productos y despues los vamos editando uno por uno */
    grid-template-columns: repeat(6, 1fr);
    /* Tambien se puede usar solo gap y se aplica a row y colunm  */
    column-gap: 2rem;
    row-gap: 2rem;
}

/* ntn selecciono un producto en esta aso el 1 */
.producto:nth-child(1) {
    /* tambien se puede usar grid-colunm-start y grid-colunm-end para indicar donde inicia y donde termina */
    grid-column: 1/7;
}








************************Object-fit********************************
El objectfit se lo aplicas al elemento o imagen a la cual deseas aplicarlo: En CSS, la propiedad object-fit se usa para controlar cómo se ajusta un contenido de un elemento reemplazado (como una imagen, video, iframe, etc.) dentro de su contenedor. Permite especificar cómo debe comportarse el contenido cuando sus dimensiones no coinciden con las del contenedor.

Valores de object-fit
fill (valor por defecto):

El contenido se estira para llenar completamente el contenedor, sin mantener sus proporciones. Esto puede causar que la imagen o el video se distorsionen.


        La propiedad object-fit en CSS se usa para especificar cómo se debe ajustar el contenido de un elemento de tipo <img>, <video>, o cualquier otro elemento con un contenido de tipo multimedia dentro de un contenedor con un tamaño específico.

        Esta propiedad es especialmente útil cuando trabajas con imágenes o vídeos dentro de contenedores con dimensiones fijas o variables y deseas controlar cómo se ajustan (o recortan) esos contenidos para que encajen en el espacio disponible sin distorsionarse.


            .producto:nth-child(2) img,
            .producto:nth-child(3) img {
                /* height y width son obligatorios para usar object-fit */
                height: 30rem;
                width: 100%;
                /* mantiene un elemento dentro de las medidad declradas */
                object-fit: cover;
            }